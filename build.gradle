plugins {
  id "org.sonarqube" version "7.0.1.6134"
}

sonar {
  properties {
    property "sonar.projectKey", "flux"
    property "sonar.host.url", "http://localhost:9000"
    property "sonar.coverage.jacoco.xmlReportPaths", "code-coverage-report/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    // Avoids a warning from Gradle.
    property "sonar.gradle.skipCompile", "true"
  }
}

subprojects {
  apply plugin: "java-library"

  group = "com.marklogic"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  // Allows for quickly identifying compiler warnings.
  tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation"]
    options.deprecation = true
    options.warnings = true
  }

  javadoc.failOnError = false
  // Ignores warnings on params that don't have descriptions, which is a little too noisy
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()

    // For ease of development when modifying the Spark connector.
    mavenLocal()

    // For temporary dependencies on internal snapshots.
    maven {
      url = "https://bed-artifactory.bedford.progress.com:443/artifactory/ml-maven-snapshots/"
    }
  }

  configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      // Defining this rule for io.netty here so that it affects both flux-cli and flux-embedding-model-azure-open-ai.
      if (details.requested.group.equals("io.netty") and details.requested.version.startsWith("4.1.1")) {
        details.useVersion "4.1.128.Final"
        details.because "Bumping from 4.1.127 (what Spark SQL 4.1.0-preview2 depends on) to eliminate CVEs."
      }
    }
  }

  test {
    useJUnitPlatform()
    testLogging {
      events = ['started', 'passed', 'skipped', 'failed']
      exceptionFormat = 'full'
    }
    jvmArgs = [
      // Needed for all Java 17 testing.
      "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",

      // For Spark's SerializationDebugger when using Java 17. See ReprocessTest for one example of why this is needed.
      "--add-opens", "java.base/sun.security.action=ALL-UNNAMED",

      // Needed by the JDBC tests.
      "--add-opens", "java.base/sun.util.calendar=ALL-UNNAMED",

      // Needed by CustomImportTest
      "--add-opens", "java.base/java.io=ALL-UNNAMED",
      "--add-opens", "java.base/sun.nio.cs=ALL-UNNAMED"
    ]
  }
}

tasks.register("gettingStartedZip", Zip) {
  description = "Creates a zip of the getting-started project that is intended to be included as a downloadable file " +
    "on the GitHub release page."
  from "examples/getting-started"
  exclude "build", ".gradle", "gradle-*.properties", "flux", ".gitignore", "marklogic-flux"
  exclude "src/main/ml-schemas/tde/chunks.json"
  into "marklogic-flux-getting-started-${version}"
  archiveFileName = "marklogic-flux-getting-started-${version}.zip"
  destinationDirectory = file("build")
}
