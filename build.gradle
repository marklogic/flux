plugins {
  id "org.sonarqube" version "6.1.0.5360"
}

sonar {
  properties {
    property "sonar.projectKey", "flux"
    property "sonar.host.url", "http://localhost:9000"
    property "sonar.coverage.jacoco.xmlReportPaths", "code-coverage-report/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    // Avoids a warning from Gradle.
    property "sonar.gradle.skipCompile", "true"
  }
}

subprojects {
  apply plugin: "java-library"

  group = "com.marklogic"

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  // Allows for quickly identifying compiler warnings.
  tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation"]
    options.deprecation = true
    options.warnings = true
  }

  javadoc.failOnError = false
  // Ignores warnings on params that don't have descriptions, which is a little too noisy
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url = "https://bed-artifactory.bedford.progress.com:443/artifactory/ml-maven-snapshots/"
    }
  }

  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group.equals("org.apache.hadoop") and details.requested.version.equals("3.4.1")) {
        details.useVersion "3.4.2"
        details.because "Bumping to 3.4.2 to minimize CVEs."
      }
      if (details.requested.group.startsWith('com.fasterxml.jackson')) {
        details.useVersion '2.18.2'
        details.because 'Need to match the version used by Spark 4.0.1.'
      }
      if (details.requested.group.equals("org.slf4j")) {
        details.useVersion "2.0.17"
        details.because "Ensures that slf4j-api 1.x does not appear on the Flux classpath in particular, which can " +
          "lead to this issue - https://www.slf4j.org/codes.html#StaticLoggerBinder."
      }
      if (details.requested.group.equals("org.codehaus.janino")) {
        details.useVersion "3.1.12"
        details.because "Bumping from 3.1.9 (what Spark SQL 4.0.1 depends on) to 3.1.12 to minimize CVEs."
      }
      if (details.requested.group.equals("io.netty") and details.requested.version.startsWith("4.1.1")) {
        details.useVersion "4.1.127.Final"
        details.because "Bumping from 4.1.118 (what Spark SQL 4.0.1 depends on) to 4.1.127 to minimize CVEs."
      }
    }

    resolutionStrategy {
      // Avoids a classpath conflict between Spark and tika-parser-microsoft-module. Forces Spark to use the
      // version that tika-parser-microsoft-module wants.
      // Avoids another classpath conflict between Spark and tika-parser-microsoft-module.
      force "org.apache.commons:commons-compress:1.27.1"

      // Forcing 3.18.0 to resolve CVEs on earlier versions of commons-lang3.
      force "org.apache.commons:commons-lang3:3.18.0"

      // Resolves a medium CVE that comes from json-unit-assertj .
      force "net.minidev:json-smart:2.5.2"
    }

    // Excluding the nimbus-jose-jwt dependency that comes in via hadoop-auth. Hadoop 3.4.2 depends on 9.x, which has a
    // medium CVE that is addressed in 10.x. But it is only used for JWT auth with Hadoop, which Flux will never expose
    // to a user.
    exclude group: "com.nimbusds", module: "nimbus-jose-jwt"

    // Without this exclusion, we have multiple slf4j providers, leading to an ugly warning at the start
    // of each Flux execution.
    exclude group: "org.slf4j", module: "slf4j-reload4j"

    // The rocksdbjni dependency weighs in at 50mb and so far does not appear necessary for our use of Spark.
    exclude module: "rocksdbjni"

    // Excluding Jetty, as Spark 4 depends on Jetty 9 which brings in several medium CVEs. Testing has shown that Spark
    // must be modular enough to run fine without Jetty on the classpath, as no failures are occurring without Jetty
    // bring present. Note that org.eclipse.jetty.websocket libraries are still on the classpath, but those are fine as
    // they do not have any CVEs.
    exclude group: "org.eclipse.jetty"
  }

  test {
    useJUnitPlatform()
    testLogging {
      events = ['started', 'passed', 'skipped', 'failed']
      exceptionFormat = 'full'
    }
    jvmArgs = [
      // Needed for all Java 17 testing.
      "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",

      // For Spark's SerializationDebugger when using Java 17. See ReprocessTest for one example of why this is needed.
      "--add-opens", "java.base/sun.security.action=ALL-UNNAMED",

      // Needed by the JDBC tests.
      "--add-opens", "java.base/sun.util.calendar=ALL-UNNAMED",

      // Needed by CustomImportTest
      "--add-opens", "java.base/java.io=ALL-UNNAMED",
      "--add-opens", "java.base/sun.nio.cs=ALL-UNNAMED"
    ]
  }
}

tasks.register("gettingStartedZip", Zip) {
  description = "Creates a zip of the getting-started project that is intended to be included as a downloadable file " +
    "on the GitHub release page."
  from "examples/getting-started"
  exclude "build", ".gradle", "gradle-*.properties", "flux", ".gitignore", "marklogic-flux"
  exclude "src/main/ml-schemas/tde/chunks.json"
  into "marklogic-flux-getting-started-${version}"
  archiveFileName = "marklogic-flux-getting-started-${version}.zip"
  destinationDirectory = file("build")
}
